#!/bin/bash -eu
#
# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

set -o errexit
set -o nounset
set -o pipefail

if ! which gh > /dev/null; then
  echo "Can't find 'github-cli' tool in PATH; install from https://github.com/cli/cli"
  exit 1
fi

# poor man's version comparison helper
function version {
  printf "1%d%02d%02d\n" $(echo "$1" | sed 's/v//g' | sed -e 's/\./ /g')
}

minimum_k8s_version="$(cat "$(dirname $0)/../MINIMUM_KUBERNETES_VERSION")"

# fetch all Kubernetes and hyperkube releases
kubernetes_releases="$(
  git ls-remote --tags https://github.com/kubernetes/kubernetes.git \
  | sed -n 's/.*refs\/tags\/\([^-\^]*\)$/\1/p'
)"
hyperkube_releases="$(
  git ls-remote --tags --heads https://github.com/gardener/hyperkube.git
)"

# compute for which versions we have to build an image
to_build_versions=()
for release in $kubernetes_releases; do
  # check if release is large enough
  if [[ $(version "$minimum_k8s_version") -gt $(version "$release") ]]; then
    # skipping release as it doesn't match minimum Kubernetes version <minimum_k8s_version>
    continue
  fi

  # check if hyperkube release exists already
  if [ "$(echo "$hyperkube_releases" | grep "$release" | wc -l)" != "0" ]; then
    # skipping release as tag or branch exists already
    continue
  fi

  to_build_versions+=( "$release" )
done

# loop over each version and build an image
if (( ${#to_build_versions[@]} )); then
  for release in ${to_build_versions[@]}; do
    echo "Must build an image for Kubernetes release $release ..."
    git checkout -b "release-$release"
    pushd "$(dirname $0)/.." >/dev/null
    echo "$release" > KUBERNETES_VERSION
    make docker-push
    git add KUBERNETES_VERSION
    git commit -m "Release $release"
    git tag "$release"
    git push origin "$release"
    sleep 30
    read -r -d '' release_notes <<-EOF
      # [hyperkube]
      ## Container Images
      europe-docker.pkg.dev/gardener-project/releases/hyperkube:$release
EOF
    gh \
        release create  \
        -n "${release_notes}" \
        $release
    popd >/dev/null

    git checkout master
    git branch -D "release-$release"
    echo -e "Succesfully built an image for $release\n"
  done
fi
